{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name list.events, :imports nil, :requires {re-frame re-frame.core, re-frame.core re-frame.core, db list.db, list.db list.db}, :uses nil, :defs {to-list {:protocol-inline nil, :meta {:file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\events.cljs", :line 7, :column 7, :end-line 7, :end-column 14, :arglists (quote ([items]))}, :name list.events/to-list, :variadic false, :file "src\\cljs\\list\\events.cljs", :end-column 14, :method-params ([items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([items]))}, includesInsensitive? {:protocol-inline nil, :meta {:file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\events.cljs", :line 14, :column 7, :end-line 14, :end-column 27, :arglists (quote ([str query]))}, :name list.events/includesInsensitive?, :variadic false, :file "src\\cljs\\list\\events.cljs", :end-column 27, :method-params ([str query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([str query]))}, filter-items-by-text {:protocol-inline nil, :meta {:file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\events.cljs", :line 19, :column 7, :end-line 19, :end-column 27, :arglists (quote ([text items]))}, :name list.events/filter-items-by-text, :variadic false, :file "src\\cljs\\list\\events.cljs", :end-column 27, :method-params ([text items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text items]))}, filter-items-by-tag {:protocol-inline nil, :meta {:file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\events.cljs", :line 22, :column 7, :end-line 22, :end-column 26, :arglists (quote ([tag items]))}, :name list.events/filter-items-by-tag, :variadic false, :file "src\\cljs\\list\\events.cljs", :end-column 26, :method-params ([tag items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tag items]))}, replace-item {:protocol-inline nil, :meta {:file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\events.cljs", :line 25, :column 7, :end-line 25, :end-column 19, :arglists (quote ([item items]))}, :name list.events/replace-item, :variadic false, :file "src\\cljs\\list\\events.cljs", :end-column 19, :method-params ([item items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([item items]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:search-tag :initialize-db :add-item :clear-filter :remove-item :visible-item-ids :update-item :set-page :page :title :id :notes :items :receive-items :search-text}, :order [:title :notes :id :initialize-db :set-page :page :receive-items :visible-item-ids :items :remove-item :add-item :update-item :search-text :search-tag :clear-filter]}, :doc nil}