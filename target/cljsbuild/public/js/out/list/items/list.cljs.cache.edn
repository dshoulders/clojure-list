{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name list.items.list, :imports nil, :requires {accountant accountant.core, accountant.core accountant.core, re-frame re-frame.core, re-frame.core re-frame.core, base-styles list.styles.base-styles, list.styles.base-styles list.styles.base-styles}, :uses {break-long-words list.styles.base-styles, tag-styles list.styles.base-styles}, :defs {note-styles {:name list.items.list/note-styles, :file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\items\\list.cljs", :line 20, :column 1, :end-line 20, :end-column 17, :meta {:file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\items\\list.cljs", :line 20, :column 6, :end-line 20, :end-column 17}, :tag any}, view {:protocol-inline nil, :meta {:file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\items\\list.cljs", :line 58, :column 7, :end-line 58, :end-column 11, :arglists (quote ([]))}, :name list.items.list/view, :variadic false, :file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\items\\list.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, filter-visible {:protocol-inline nil, :meta {:file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\items\\list.cljs", :line 40, :column 7, :end-line 40, :end-column 21, :arglists (quote ([visible-item-ids items]))}, :name list.items.list/filter-visible, :variadic false, :file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\items\\list.cljs", :end-column 21, :method-params ([visible-item-ids items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([visible-item-ids items]))}, in? {:protocol-inline nil, :meta {:file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\items\\list.cljs", :line 26, :column 7, :end-line 26, :end-column 10, :arglists (quote ([coll elm])), :doc "true if coll contains elm"}, :name list.items.list/in?, :variadic false, :file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\items\\list.cljs", :end-column 10, :method-params ([coll elm]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll elm])), :doc "true if coll contains elm"}, split-marks {:protocol-inline nil, :meta {:file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\items\\list.cljs", :line 34, :column 7, :end-line 34, :end-column 18, :arglists (quote ([marked-string]))}, :name list.items.list/split-marks, :variadic false, :file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\items\\list.cljs", :end-column 18, :method-params ([marked-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([marked-string]))}, mark-tags {:protocol-inline nil, :meta {:file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\items\\list.cljs", :line 31, :column 7, :end-line 31, :end-column 16, :arglists (quote ([notes]))}, :name list.items.list/mark-tags, :variadic false, :file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\items\\list.cljs", :end-column 16, :method-params ([notes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([notes]))}, item-styles {:name list.items.list/item-styles, :file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\items\\list.cljs", :line 9, :column 1, :end-line 9, :end-column 17, :meta {:file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\items\\list.cljs", :line 9, :column 6, :end-line 9, :end-column 17}, :tag cljs.core/IMap}, notes-html {:protocol-inline nil, :meta {:file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\items\\list.cljs", :line 46, :column 7, :end-line 46, :end-column 17, :arglists (quote ([notes-part]))}, :name list.items.list/notes-html, :variadic false, :file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\items\\list.cljs", :end-column 17, :method-params ([notes-part]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([notes-part]))}, title-styles {:name list.items.list/title-styles, :file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\items\\list.cljs", :line 16, :column 1, :end-line 16, :end-column 18, :meta {:file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\items\\list.cljs", :line 16, :column 6, :end-line 16, :end-column 18}, :tag cljs.core/IMap}, notes-display {:protocol-inline nil, :meta {:file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\items\\list.cljs", :line 53, :column 7, :end-line 53, :end-column 20, :arglists (quote ([notes]))}, :name list.items.list/notes-display, :variadic false, :file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\items\\list.cljs", :end-column 20, :method-params ([notes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([notes]))}, sort-by-title {:protocol-inline nil, :meta {:file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\items\\list.cljs", :line 37, :column 7, :end-line 37, :end-column 20, :arglists (quote ([items]))}, :name list.items.list/sort-by-title, :variadic false, :file "C:\\Users\\dshou\\Sandbox\\clojure\\list\\src\\cljs\\list\\items\\list.cljs", :end-column 20, :method-params ([items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([items]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:color :key :borderRadius :visible-item-ids :background :marginTop :title :style :div :div.item-list :on-double-click :id :notes :padding :marginBottom :fontSize :boxShadow :items :href :a :span}, :order [:marginBottom :background :padding :boxShadow :borderRadius :fontSize :color :marginTop :title :id :a :href :span :style :div :items :visible-item-ids :div.item-list :on-double-click :notes :key]}, :doc nil}